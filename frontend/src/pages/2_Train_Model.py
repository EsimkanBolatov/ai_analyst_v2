#frontend/src/pages/2_Train_Model.py
import streamlit as st
import pandas as pd
import requests
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TRAINING_SERVICE_URL = "http://training_service:8000"
FILE_SERVICE_URL = "http://file_service:8000"

st.set_page_config(page_title="–û–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π", layout="wide")
st.title("üî¨ –û–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π (–±–µ–∑ —É—á–∏—Ç–µ–ª—è)")

if 'filename' not in st.session_state:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
else:
    filename = st.session_state['filename']
    st.info(f"–†–∞–±–æ—Ç–∞–µ–º —Å —Ñ–∞–π–ª–æ–º: `{filename}`")

    try:
        response = requests.get(f"{FILE_SERVICE_URL}/columns/{filename}")
        response.raise_for_status()
        columns = response.json().get("columns", [])

        if not columns:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞.")
        else:
            st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏")
            # target_column = st.selectbox("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É", columns) # <-- –£–ë–†–ê–õ–ò

            # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å–¥–≤–∏–Ω—É–ª–∞—Å—å
            feature_columns = columns  # –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫–∏
            numerical_features = st.multiselect("1. –í—ã–±–µ—Ä–∏—Ç–µ –ß–ò–°–õ–û–í–´–ï –ø—Ä–∏–∑–Ω–∞–∫–∏", feature_columns)

            available_for_cat = [col for col in feature_columns if col not in numerical_features]
            categorical_features = st.multiselect("2. –í—ã–±–µ—Ä–∏—Ç–µ –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–ï –ø—Ä–∏–∑–Ω–∞–∫–∏", available_for_cat)

            available_for_date = [col for col in available_for_cat if col not in categorical_features]
            date_features = st.multiselect("3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –î–ê–¢–û–ô/–í–†–ï–ú–ï–ù–ï–ú", available_for_date)

            if st.button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π"):
                with st.spinner("–ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è..."):
                    training_request = {
                        "filename": filename,
                        # "target_column": target_column, # <-- –£–ë–†–ê–õ–ò
                        "numerical_features": numerical_features,
                        "categorical_features": categorical_features,
                        "date_features": date_features
                    }

                    # --- –í–´–ó–´–í–ê–ï–ú –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ ---
                    response = requests.post(f"{TRAINING_SERVICE_URL}/train_anomaly_detector/", json=training_request)

                    if response.status_code == 200:
                        result = response.json()
                        st.success(f"‚úÖ {result['message']}")
                        # –û—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –±–æ–ª—å—à–µ –Ω–µ—Ç
                    else:
                        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {response.text}")

    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: {e}")
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")