import streamlit as st
import requests
import os

# --- URL —Å–µ—Ä–≤–∏—Å–æ–≤ ---
FILE_SERVICE_URL = "http://file_service:8000"
TRAINING_SERVICE_URL = "http://training_service:8000"

st.set_page_config(page_title="Train Model", layout="wide")
st.title("üóø –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@st.cache_data(ttl=30)
def get_file_list():
    try:
        response = requests.get(f"{FILE_SERVICE_URL}/files/")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.toast(f"Warning: Could not fetch file list from file_service: {e}", icon="‚ö†Ô∏è")
    return []

@st.cache_data(ttl=5)
def get_columns_for_file(filename: str):
    if not filename: return []
    try:
        response = requests.get(f"{FILE_SERVICE_URL}/columns/{filename}")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –æ—Ç 'file_service'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker.")
    except requests.exceptions.HTTPError as e:
         st.error(f"‚ùå –°–µ—Ä–≤–∏—Å 'file_service' –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª–æ–Ω–æ–∫: {e.response.status_code}")
         try:
             error_detail = e.response.json().get("detail", e.response.text)
             st.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_detail}")
         except Exception:
             st.error(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
    return []

# --- –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ ---
st.header("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
file_list = get_file_list()

if not file_list:
    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    st.stop()

selected_file = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ .csv —Ñ–∞–π–ª:",
    options=file_list,
    index=None,
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª..."
)

# --- –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
if selected_file:
    all_columns = get_columns_for_file(selected_file)
    if all_columns:
        st.header("–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")

        col1, col2, col3 = st.columns(3)
        with col1:
            numerical_features = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ **—á–∏—Å–ª–æ–≤—ã–µ** –ø—Ä–∏–∑–Ω–∞–∫–∏:",
                options=all_columns
            )
        with col2:
            categorical_features = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ **–∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ** –ø—Ä–∏–∑–Ω–∞–∫–∏:",
                options=all_columns
            )
        with col3:
            date_features = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ **–ø—Ä–∏–∑–Ω–∞–∫–∏-–¥–∞—Ç—ã**:",
                options=all_columns,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏/–≤—Ä–µ–º–µ–Ω–µ–º. –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã (—á–∞—Å, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —Ç.–¥.)."
            )

        st.header("–®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Feature Engineering (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

        enable_fe = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Feature Engineering)?")

        card_id_col = None
        timestamp_col = None
        amount_col = None

        if enable_fe:
            st.info("""
            –ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏:
            - `is_night`: 1 –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–æ—á—å—é (22:00-06:00), –∏–Ω–∞—á–µ 0.
            - `card_tx_count_1h`: –ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.
            - `card_tx_amount_sum_1h`: –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.

            **–í–∞–∂–Ω–æ:** –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∏–∂–µ.
            –ö–æ–ª–æ–Ω–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –≤ **"–ø—Ä–∏–∑–Ω–∞–∫–∞—Ö-–¥–∞—Ç–∞—Ö"** –≤—ã—à–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ `_hour`.
            """)
            fe_cols = st.columns(3)
            with fe_cols[0]:
                card_id_col = st.selectbox(
                    "–ö–æ–ª–æ–Ω–∫–∞ ID –∫–∞—Ä—Ç—ã:", options=all_columns, index=None, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É..."
                )
            with fe_cols[1]:
                timestamp_col = st.selectbox(
                    "–ö–æ–ª–æ–Ω–∫–∞ –í—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", options=all_columns, index=None, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É..."
                )
            with fe_cols[2]:
                amount_col = st.selectbox(
                    "–ö–æ–ª–æ–Ω–∫–∞ –°—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", options=all_columns, index=None, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É..."
                )

        st.header("–®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ")

        model_name = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'my_anomaly_model_1')",
            placeholder="my_anomaly_model_1"
        )

        # --- OneClassSVM –≤ —Å–ø–∏—Å–æ–∫ ---
        model_type = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏:",
            ["IsolationForest", "LocalOutlierFactor", "OneClassSVM"]
        )
        # ---------------------------------------------------

        st.markdown("---")

        if st.button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π", type="primary"):
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if not model_name:
                st.error("–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")
            elif not numerical_features and not categorical_features and not date_features:
                st.error("–û—à–∏–±–∫–∞: –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ (—á–∏—Å–ª–æ–≤–æ–π, –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –∏–ª–∏ –¥–∞—Ç—É).")
            elif enable_fe and not all([card_id_col, timestamp_col, amount_col]):
                 st.error("–û—à–∏–±–∫–∞: –ï—Å–ª–∏ Feature Engineering –≤–∫–ª—é—á–µ–Ω, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ ID –∫–∞—Ä—Ç—ã, –í—Ä–µ–º–µ–Ω–∏ –∏ –°—É–º–º—ã.")
            elif enable_fe and timestamp_col not in date_features:
                 st.error(f"–û—à–∏–±–∫–∞: –ï—Å–ª–∏ Feature Engineering –≤–∫–ª—é—á–µ–Ω, –∫–æ–ª–æ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ('{timestamp_col}') –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –≤ '–ü—Ä–∏–∑–Ω–∞–∫–∞—Ö-–¥–∞—Ç–∞—Ö'.")
            else:
                with st.spinner("–ò–¥–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
                    service_name = "training_service"
                    try:
                        payload = {
                            "filename": selected_file,
                            "model_name": model_name,
                            "model_type": model_type,
                            "numerical_features": numerical_features,
                            "categorical_features": categorical_features,
                            "date_features": date_features,
                            "enable_feature_engineering": enable_fe,
                            "card_id_column": card_id_col,
                            "timestamp_column": timestamp_col,
                            "amount_column": amount_col
                        }

                        response = requests.post(
                            f"{TRAINING_SERVICE_URL}/train_anomaly_detector/",
                            json=payload,
                            timeout=600 # 10 –º–∏–Ω—É—Ç
                        )
                        response.raise_for_status()

                        st.success(f"–ú–æ–¥–µ–ª—å '{model_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                        st.json(response.json())

                    except requests.exceptions.RequestException as e:
                        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º '{service_name}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker.")
                    except requests.exceptions.HTTPError as e:
                         st.error(f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e.response.status_code}")
                         try:
                             error_detail = e.response.json().get("detail", e.response.text)
                             st.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_detail}")
                         except Exception:
                             st.error(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
                    except Exception as e:
                         st.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")