#frontend/src/pages/1_AI_Analyst_Report.py
import streamlit as st
import requests
import os
import pandas as pd
import json
import plotly.express as px
import plotly.graph_objects as go

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="AI Analyst Report",
    page_icon="ü§ñ",
    layout="wide"
)

# --- URL —Å–µ—Ä–≤–∏—Å–æ–≤ ---
FILE_SERVICE_URL = os.getenv("FILE_SERVICE_URL", "http://file_service:8000")
GROQ_SERVICE_URL = os.getenv("GROQ_SERVICE_URL", "http://groq_service:8000")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_analyzed_file():
    return st.session_state.get("last_analyzed_filename")

def set_analyzed_file(filename):
    st.session_state["last_analyzed_filename"] = filename
    if "chat_history" in st.session_state:
        del st.session_state["chat_history"]
    if "last_analysis_result" in st.session_state:
        del st.session_state['last_analysis_result']

@st.cache_data(ttl=30)
def get_file_list():
    try:
        response = requests.get(f"{FILE_SERVICE_URL}/files/")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.toast(f"Warning: Could not fetch file list: {e}", icon="‚ö†Ô∏è")
    return []


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.title("ü§ñ –û—Ç—á–µ—Ç AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç AI (–Ω–∞ –±–∞–∑–µ Groq) –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")

# --- –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ ---
st.subheader("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
file_list = get_file_list()
if not file_list:
    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
    st.stop()

selected_file = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞:",
    options=file_list,
    index=file_list.index(get_analyzed_file()) if get_analyzed_file() in file_list else None,
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª..."
)

# --- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ù–û–í–û–ì–û –∞–Ω–∞–ª–∏–∑–∞ ---
if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", key="analyze_button"):
    if selected_file:
        set_analyzed_file(selected_file)
        with st.spinner("ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫ –∏–∑—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ..."):
            service_name = "groq_service (analyze)"
            try:
                groq_req = {"filename": selected_file}
                groq_resp = requests.post(f"{GROQ_SERVICE_URL}/analyze/", json=groq_req, timeout=180)
                groq_resp.raise_for_status()
                analysis_data = groq_resp.json()
                st.session_state["last_analysis_result"] = analysis_data
                st.session_state["chat_history"] = [{"role": "assistant", "content": json.dumps(analysis_data)}]
                st.success("–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            except requests.exceptions.RequestException as e:
                st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å '{service_name}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker.")
            except requests.exceptions.HTTPError as e:
                 st.error(f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e.response.status_code}")
                 # ... (error detail handling) ...
            except Exception as e:
                 st.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª.")

# --- –ë–ª–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏ —á–∞—Ç–∞ ---
current_analysis = st.session_state.get("last_analysis_result")
current_filename = st.session_state.get("last_analyzed_filename")

if current_analysis and selected_file == current_filename:

    st.header(f"2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {current_filename}")

    # --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ---
    with st.container(border=True):
        st.subheader("üìù –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã")
        st.write(current_analysis.get("main_findings", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."))
        st.subheader("üí° –ò–¥–µ–∏ Feature Engineering")
        for idea in current_analysis.get("feature_engineering_ideas", []):
            st.markdown(f"- {idea}")
        st.subheader("üìë –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        st.write(current_analysis.get("recommendations", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."))


    # --- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –°—É–º–º –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---
    st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –°—É–º–º –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (transaction_amount_kzt)")
    dist_stats = current_analysis.get("amount_distribution_stats")

    if dist_stats and dist_stats.get("count", 0) > 0:
        st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ –ø–µ—Ä–≤—ã–º 100 —Å—Ç—Ä–æ–∫–∞–º)")
        stats_cols = st.columns(5)
        stats_cols[0].metric("–ú–∏–Ω–∏–º—É–º", f"{dist_stats.get('min_val', 'N/A'):,.2f}")
        stats_cols[1].metric("25% (Q1)", f"{dist_stats.get('p25', 'N/A'):,.2f}")
        stats_cols[2].metric("–ú–µ–¥–∏–∞–Ω–∞ (Q2)", f"{dist_stats.get('median', 'N/A'):,.2f}")
        stats_cols[3].metric("75% (Q3)", f"{dist_stats.get('p75', 'N/A'):,.2f}")
        stats_cols[4].metric("–ú–∞–∫—Å–∏–º—É–º", f"{dist_stats.get('max_val', 'N/A'):,.2f}")
        st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{dist_stats.get('mean_val', 'N/A'):,.2f}")
        st.caption(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ {dist_stats.get('count')} –∑–Ω–∞—á–µ–Ω–∏—è–º.")

        # –°—Ç—Ä–æ–∏–º Box Plot
        st.subheader("–ì—Ä–∞—Ñ–∏–∫ Box Plot (–Ø—â–∏–∫ —Å —É—Å–∞–º–∏)")
        try:
            fig_box = go.Figure()
            fig_box.add_trace(go.Box(
                name='Amount Distribution',
                q1=[dist_stats.get('p25')],
                median=[dist_stats.get('median')],
                q3=[dist_stats.get('p75')],
                lowerfence=[dist_stats.get('min_val')],
                upperfence=[dist_stats.get('max_val')],
                mean=[dist_stats.get('mean_val')],
                sd=[0],
                boxpoints=False
            ))
            fig_box.update_layout(
                 title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ transaction_amount_kzt (Box Plot)",
                 yaxis_title="–°—É–º–º–∞ (KZT)"
            )
            st.plotly_chart(fig_box, use_container_width=True)
            st.info("""
            **–ö–∞–∫ —á–∏—Ç–∞—Ç—å Box Plot:**
            * **–Ø—â–∏–∫:** –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –º–µ–∂–¥—É 25-–º (Q1) –∏ 75-–º (Q3) –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è–º–∏. –í–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è 50% –¥–∞–Ω–Ω—ã—Ö.
            * **–õ–∏–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —è—â–∏–∫–∞:** –ú–µ–¥–∏–∞–Ω–∞ (50-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å).
            * **–£—Å—ã:** –õ–∏–Ω–∏–∏, –∏–¥—É—â–∏–µ –æ—Ç —è—â–∏–∫–∞ –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—è–º (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ).
            * **–¢–æ—á–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):** –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
            –î–ª–∏–Ω–Ω—ã–µ —É—Å—ã –∏–ª–∏ –±–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –º–µ–¥–∏–∞–Ω–æ–π –∏ —Å—Ä–µ–¥–Ω–∏–º –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≤—ã–±—Ä–æ—Å—ã (–∞–Ω–æ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–∏–µ/–º–∞–ª–µ–Ω—å–∫–∏–µ —Å—É–º–º—ã).
            """)
        except Exception as plot_err:
             st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å Box Plot: {plot_err}")

    else:
        st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º –Ω–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞.")


    # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π Scatter Plot ---
    st.header("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏")
    anomalies = current_analysis.get("anomalies", [])
    if anomalies:
        plot_data_list = []
        for anom in anomalies:
            p_data = anom.get("plot_data")
            if p_data:
                 plot_data_list.append({
                     "index": anom.get("row_index"), "reason": anom.get("reason", "N/A"),
                     "amount": p_data.get("transaction_amount_kzt"), "hour": p_data.get("transaction_hour"),
                     "category": p_data.get("mcc_category", "Unknown")
                 })
        if plot_data_list:
             df_plot = pd.DataFrame(plot_data_list)
             if 'amount' in df_plot.columns and 'hour' in df_plot.columns and not df_plot[['amount', 'hour']].isnull().all().all():
                 st.subheader("üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∞–Ω–æ–º–∞–ª–∏–π (–°—É–º–º–∞ vs –ß–∞—Å)")
                 fig = px.scatter(df_plot, x="hour", y="amount", color="category", size="amount",
                                  hover_name="index", hover_data=["reason", "category", "amount", "hour"],
                                  title="–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –°—É–º–º–∞ vs –ß–∞—Å", labels={"hour": "–ß–∞—Å", "amount": "–°—É–º–º–∞ (KZT)"})
                 fig.update_layout(xaxis=dict(range=[-1, 24]))
                 st.plotly_chart(fig, use_container_width=True)
             else: st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π.")
        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –∞–Ω–æ–º–∞–ª–∏–π")
        anomalies_for_table = [{k: v for k, v in anom.items() if k != 'plot_data'} for anom in anomalies]
        df_anomalies = pd.DataFrame(anomalies_for_table)
        st.dataframe(df_anomalies, width=None, use_container_width=True)
    else: st.info("–ê–Ω–æ–º–∞–ª–∏–∏ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω—ã.")

    # -------------- –ß–∞—Ç  ------------------------
    st.header("3. üí¨ –ß–∞—Ç —Å AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–æ–º")
    st.markdown("–ó–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –æ—Ç—á–µ—Ç—É –≤—ã—à–µ.")
    if "chat_history" in st.session_state:
        for msg in st.session_state.chat_history[1:]:
            avatar = "üë§" if msg["role"] == "user" else "ü§ñ"
            with st.chat_message(msg["role"], avatar=avatar):
                st.markdown(msg["content"])
    if prompt := st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å..."):
        if "chat_history" not in st.session_state: st.session_state.chat_history = []
        st.session_state.chat_history.append({"role": "user", "content": prompt})
        with st.chat_message("user", avatar="üë§"):
            st.markdown(prompt)
        with st.chat_message("assistant", avatar="ü§ñ"):
            with st.spinner("–î—É–º–∞—é..."):
                service_name = "groq_service (chat)"
                try:
                    chat_req = {"filename": current_filename, "chat_history": st.session_state.chat_history}
                    chat_resp = requests.post(f"{GROQ_SERVICE_URL}/chat/", json=chat_req, timeout=180)
                    chat_resp.raise_for_status()
                    response_data = chat_resp.json()
                    response_content = response_data.get("content")
                    st.markdown(response_content)
                    st.session_state.chat_history.append({"role": "assistant", "content": response_content})
                except requests.exceptions.RequestException as e: st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å '{service_name}'.")
                except requests.exceptions.HTTPError as e: st.error(f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e.response.status_code}")
                except Exception as e: st.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")

elif selected_file:
     st.info(f"–î–ª—è —Ñ–∞–π–ª–∞ '{selected_file}' –µ—â–µ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ.")