import streamlit as st
import requests
import os
import json
import datetime
import pandas as pd
import plotly.express as px
import numpy as np

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
FILE_SERVICE_URL = "http://file_service:8000"
PREDICTION_SERVICE_URL = "http://prediction_service:8000"
TRAINING_SERVICE_URL = "http://training_service:8000"

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –∏ –û—Ü–µ–Ω–∫–∞", layout="wide")
st.title("üéØ –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ---
@st.cache_data(ttl=30)
def get_file_list():
    try:
        response = requests.get(f"{FILE_SERVICE_URL}/files/")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.toast(f"Warning: Could not fetch file list from file_service: {e}", icon="‚ö†Ô∏è")
    return []

@st.cache_data(ttl=60)
def get_model_list():
    try:
        response = requests.get(f"{TRAINING_SERVICE_URL}/models/")
        response.raise_for_status()
        return response.json().get("models", [])
    except requests.exceptions.RequestException as e:
         st.toast(f"Warning: Could not fetch model list from training_service: {e}", icon="‚ö†Ô∏è")
    return []

# --- –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π ---
file_list = get_file_list()
model_list = get_model_list()

if not model_list:
    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 'Train Model'.")
    st.stop()
if not file_list:
    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    st.stop()

# --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ ---
tab1, tab2 = st.tabs(["–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)", "–û–¥–∏–Ω–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–≤—Ä—É—á–Ω—É—é)"])

# --- –ê–ù–ê–õ–ò–ó –í–°–ï–ì–û –§–ê–ô–õ–ê ---
with tab1:
    st.header("1. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π (–≤–µ—Å—å —Ñ–∞–π–ª)")
    st.markdown("""
    –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å (`IsolationForest`).
    –°–µ—Ä–≤–∏—Å –ø—Ä–∏–º–µ–Ω–∏—Ç –º–æ–¥–µ–ª—å –∫–æ **–≤—Å–µ–º—É** —Ñ–∞–π–ª—É –∏ –≤–µ—Ä–Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏.
    –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤–∏–∑—É–∞–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π.
    """)

    col1, col2 = st.columns(2)
    with col1:
        selected_file_tab1 = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            options=file_list,
            index=None,
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª...",
            key="tab1_file"
        )
    with col2:
        selected_model_tab1 = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å:",
            options=model_list,
            index=None,
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å...",
            key="tab1_model"
        )

    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫–∏", key="score_file_button"):
        if selected_file_tab1 and selected_model_tab1:
            with st.spinner(f"–ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å '{selected_model_tab1}' –∫–æ –≤—Å–µ–º—É —Ñ–∞–π–ª—É '{selected_file_tab1}'..."):
                service_name = "prediction_service (/score_file/)" # –î–ª—è –æ—à–∏–±–æ–∫
                try:
                    payload = {
                        "model_name": selected_model_tab1,
                        "filename": selected_file_tab1
                    }
                    response = requests.post(f"{PREDICTION_SERVICE_URL}/score_file/", json=payload, timeout=600)
                    response.raise_for_status() # –õ–æ–≤–∏–º HTTP –æ—à–∏–±–∫–∏

                    data = response.json()
                    scores = data.get("scores")

                    if scores:
                        st.session_state['anomaly_scores'] = scores
                        st.success("–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    else:
                        st.error("–°–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫.")

                except requests.exceptions.RequestException as e:
                    st.error(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º '{service_name}'. "
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É."
                    )
                except requests.exceptions.HTTPError as e:
                     st.error(f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e.response.status_code}")
                     try:
                         error_detail = e.response.json().get("detail", e.response.text)
                         st.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_detail}")
                     except Exception:
                         st.error(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
                except Exception as e:
                     st.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ—Ü–µ–Ω–æ–∫: {e}")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ —Ñ–∞–π–ª, –∏ –º–æ–¥–µ–ª—å.")

    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ 1 ---
    if 'anomaly_scores' in st.session_state:
        scores = st.session_state['anomaly_scores']
        df_scores = pd.DataFrame(scores, columns=["score"])

        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        stats_cols = st.columns(4)
        stats_cols[0].metric("–°—Ä–µ–¥–Ω–µ–µ (Mean)", f"{df_scores['score'].mean():.4f}")
        stats_cols[1].metric("–ú–µ–¥–∏–∞–Ω–∞ (Median)", f"{df_scores['score'].median():.4f}")
        stats_cols[2].metric("–ú–∏–Ω. (Min)", f"{df_scores['score'].min():.4f}")
        stats_cols[3].metric("–ú–∞–∫—Å. (Max)", f"{df_scores['score'].max():.4f}")

        st.markdown("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏")
        fig = px.histogram(
            df_scores, x="score", nbins=100, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏ (Anomaly Score)",
            labels={"score": "–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏"}
        )
        fig.add_vline(x=0.0, line_dash="dash", line_color="red", annotation_text="–ü–æ—Ä–æ–≥ (0.0)")
        st.plotly_chart(fig, use_container_width=True)
        st.info("""
        **–ö–∞–∫ —á–∏—Ç–∞—Ç—å —ç—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫:**
        * –ú–æ–¥–µ–ª—å `IsolationForest` –ø–æ–º–µ—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è **< 0** (—Å–ª–µ–≤–∞ –æ—Ç –∫—Ä–∞—Å–Ω–æ–π –ª–∏–Ω–∏–∏) –∫–∞–∫ **–∞–Ω–æ–º–∞–ª–∏–∏**.
        * –ß–µ–º **–Ω–∏–∂–µ** –æ—Ü–µ–Ω–∫–∞ (–¥–∞–ª—å—à–µ –≤–ª–µ–≤–æ), —Ç–µ–º –±–æ–ª–µ–µ "–∞–Ω–æ–º–∞–ª—å–Ω–æ–π" —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è.
        """)

# --- –û–î–ò–ù–û–ß–ù–ê–Ø –û–¶–ï–ù–ö–ê ---
with tab2:
    st.header("1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏")

    selected_model_tab2 = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        options=model_list,
        key="tab2_model"
    )

    if selected_model_tab2:
        service_name = "training_service (/models/.../config)"
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            config_response = requests.get(f"{TRAINING_SERVICE_URL}/models/{selected_model_tab2}/config")
            config_response.raise_for_status()
            config = config_response.json()
            model_type = config.get('model_type', 'classification')

            st.info(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å —Ç–∏–ø–∞: {'–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π' if model_type == 'anomaly_detection' else '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è'}")

            # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
            with st.form("prediction_form"):
                st.header("2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:")
                input_data = {}

                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞
                date_features = config.get('date_features', [])
                num_features = config.get('numerical_features', [])
                cat_features = config.get('categorical_features', [])
                cat_values = config.get('categorical_values', {})
                gen_date_features = config.get('generated_date_features', []) # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏—á–µ–π

                for col in num_features:
                    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∏–∑ –¥–∞—Ç
                    if col not in gen_date_features:
                        input_data[col] = st.number_input(f"–í–≤–µ–¥–∏—Ç–µ '{col}'", value=0.0, key=f"num_{col}")

                for col in cat_features:
                    options = cat_values.get(col, [])
                    if options:
                        input_data[col] = st.selectbox(f"–í—ã–±–µ—Ä–∏—Ç–µ '{col}'", options, key=f"cat_{col}")
                    else:
                         # –ï—Å–ª–∏ –æ–ø—Ü–∏–π –Ω–µ—Ç (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π), –¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                         input_data[col] = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ '{col}' (–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)", value="", key=f"cat_{col}")

                for col in date_features:
                    date_value = st.date_input(f"–î–∞—Ç–∞ '{col}'", datetime.date.today(), key=f"date_{col}")
                    time_value = st.time_input(f"–í—Ä–µ–º—è '{col}'", datetime.time(12, 00), key=f"time_{col}")
                    input_data[col] = f"{date_value.isoformat()}T{time_value.isoformat()}"

                submitted = st.form_submit_button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É")

                if submitted:
                    with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑..."):
                        service_name = "prediction_service (/predict_or_score/)" # –î–ª—è –æ—à–∏–±–æ–∫
                        try:
                            request_data = {
                                "model_name": selected_model_tab2,
                                "features": input_data
                            }
                            pred_response = requests.post(f"{PREDICTION_SERVICE_URL}/predict_or_score/", json=request_data)
                            pred_response.raise_for_status() # –õ–æ–≤–∏–º HTTP –æ—à–∏–±–∫–∏

                            result = pred_response.json()
                            st.subheader("üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏:")

                            if result.get("model_type") == "anomaly_detection":
                                score = result.get("anomaly_score", 0)
                                is_anomaly = result.get("is_anomaly_predicted", False)
                                st.metric("–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏ (Anomaly Score)", f"{score:.4f}")
                                if is_anomaly:
                                    st.error("üî¥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –ê–ù–û–ú–ê–õ–ò–Ø (score < 0)")
                                else:
                                    st.success("üü¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –ù–û–†–ú–ê (score >= 0)")
                                st.caption("–ß–µ–º –Ω–∏–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª–µ–µ –∞–Ω–æ–º–∞–ª—å–Ω–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è.")
                            else:
                                st.success(f"**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:** `{result.get('prediction', 'N/A')}`")

                        except requests.exceptions.RequestException as e:
                            st.error(
                                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º '{service_name}'. "
                                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker."
                            )
                        except requests.exceptions.HTTPError as e:
                             st.error(f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ: {e.response.status_code}")
                             try:
                                 error_detail = e.response.json().get("detail", e.response.text)
                                 st.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_detail}")
                             except Exception:
                                 st.error(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
                        except Exception as e:
                             st.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}")

        except requests.exceptions.RequestException as e:
            st.error(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏ '{selected_model_tab2}' –æ—Ç '{service_name}'. "
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker."
            )
        except requests.exceptions.HTTPError as e:
             st.error(f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ñ–∏–≥–∞: {e.response.status_code}")
             try:
                 error_detail = e.response.json().get("detail", e.response.text)
                 st.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_detail}")
             except Exception:
                 st.error(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
        except Exception as e:
             st.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")