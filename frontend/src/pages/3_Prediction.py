import streamlit as st
import requests
import os
import json
import datetime

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
PREDICTION_SERVICE_URL = "http://prediction_service:8000"
TRAINING_SERVICE_URL = "http://training_service:8000"

st.set_page_config(page_title="–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏", layout="wide")
st.title("ü§ñ –û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")

try:
    response = requests.get(f"{TRAINING_SERVICE_URL}/models/")
    response.raise_for_status()
    available_models = response.json().get("models", [])

    if not available_models:
        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.")
    else:
        selected_model_name = st.selectbox("1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", available_models)

        if selected_model_name:
            config_response = requests.get(f"{TRAINING_SERVICE_URL}/models/{selected_model_name}/config")
            config_response.raise_for_status()
            config = config_response.json()
            model_type = config.get('model_type', 'classification') # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏

            st.info(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å —Ç–∏–ø–∞: {'–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π' if model_type == 'anomaly_detection' else '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è'}")

            with st.form("prediction_form"):
                st.header("2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:")
                input_data = {}

                for col in config['numerical_features']:
                    input_data[col] = st.number_input(f"–í–≤–µ–¥–∏—Ç–µ '{col}'", value=0.0)
                for col in config['categorical_features']:
                    input_data[col] = st.selectbox(f"–í—ã–±–µ—Ä–∏—Ç–µ '{col}'", config['categorical_values'][col])
                for col in config.get('date_features', []):
                    date_value = st.date_input(f"–î–∞—Ç–∞ '{col}'", datetime.date.today())
                    time_value = st.time_input(f"–í—Ä–µ–º—è '{col}'", datetime.time(12, 00))
                    input_data[col] = f"{date_value.isoformat()}T{time_value.isoformat()}"

                submitted = st.form_submit_button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É")

                if submitted:
                    with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑..."):
                        # --- –í–´–ó–´–í–ê–ï–ú –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ ---
                        request_data = {"model_filename": selected_model_name, **input_data}
                        pred_response = requests.post(f"{PREDICTION_SERVICE_URL}/predict_or_score/", json=request_data)

                        if pred_response.status_code == 200:
                            result = pred_response.json()
                            st.subheader("üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏:")

                            # --- –ù–û–í–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê ---
                            if result.get("model_type") == "anomaly_detection":
                                score = result.get("anomaly_score", 0)
                                is_anomaly = result.get("is_anomaly_predicted", False)
                                st.metric("–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏ (Anomaly Score)", f"{score:.4f}")
                                if is_anomaly:
                                    st.error("üî¥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –ê–ù–û–ú–ê–õ–ò–Ø (score < 0)")
                                else:
                                    st.success("üü¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –ù–û–†–ú–ê (score >= 0)")
                                st.caption("–ß–µ–º –Ω–∏–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª–µ–µ –∞–Ω–æ–º–∞–ª—å–Ω–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è.")
                            else: # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                                st.success(f"**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:** `{result.get('prediction', 'N/A')}`")
                                st.write("**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º:**")
                                st.json(result.get('probabilities', {}))
                            # ------------------------------------

                        else:
                            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ: {pred_response.text}")
except requests.exceptions.RequestException as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±—ç–∫–µ–Ω–¥-—Å–µ—Ä–≤–∏—Å–æ–º: {e}")
except Exception as e:
    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")