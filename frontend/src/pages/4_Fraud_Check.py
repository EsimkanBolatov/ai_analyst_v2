import streamlit as st
import requests
import os
import re
import json

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
FRAUD_CHECK_SERVICE_URL = os.getenv("FRAUD_CHECK_SERVICE_URL", "http://fraud_check_service:8000")

st.set_page_config(page_title="–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö", layout="wide")
st.title("üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω, email, URL –∏–ª–∏ —Ç–µ–∫—Å—Ç) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞.")

# --- UI –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ ---
data_type_options = {
    "–¢–µ–ª–µ—Ñ–æ–Ω": "phone",
    "Email": "email",
    "URL-–∞–¥—Ä–µ—Å": "url",
    "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è": "text"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'last_check_value' not in st.session_state:
    st.session_state.last_check_value = None
if 'last_check_type' not in st.session_state:
    st.session_state.last_check_type = None
if 'check_result' not in st.session_state:
     st.session_state.check_result = None

# --- –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ ---
with st.form("check_form"):
    selected_option = st.selectbox("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö:", options=data_type_options.keys())

    if selected_option == "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è":
        value_to_check = st.text_area("2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", height=150)
    else:
        value_to_check = st.text_input("2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

    submitted = st.form_submit_button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")

# --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã ---
if submitted and value_to_check:
    data_type = data_type_options[selected_option]
    service_name = "fraud_check_service (/check/)"

    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
        try:
            payload = {"data_type": data_type, "value": value_to_check}
            response = requests.post(f"{FRAUD_CHECK_SERVICE_URL}/check/", json=payload, timeout=60)
            response.raise_for_status()

            result = response.json()
            st.session_state.check_result = result
            st.session_state.last_check_value = value_to_check
            st.session_state.last_check_type = data_type

        except requests.exceptions.RequestException as e:
            st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º '{service_name}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker.")
            st.session_state.check_result = None
            st.session_state.last_check_value = None
        except requests.exceptions.HTTPError as e:
             st.error(f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e.response.status_code}")
             try:
                 error_detail = e.response.json().get("detail", e.response.text)
                 st.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_detail}")
             except Exception:
                 st.error(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
             st.session_state.check_result = None
             st.session_state.last_check_value = None
        except Exception as e:
             st.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
             st.session_state.check_result = None
             st.session_state.last_check_value = None


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
if st.session_state.check_result:
    result = st.session_state.check_result
    risk_level = result.get("risk_level")
    explanation = result.get("explanation")
    risk_score = result.get("risk_score")

    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")

    if risk_level == "–í—ã—Å–æ–∫–∏–π": st.error(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level} (–û—Ü–µ–Ω–∫–∞: {risk_score})**")
    elif risk_level == "–°—Ä–µ–¥–Ω–∏–π": st.warning(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level} (–û—Ü–µ–Ω–∫–∞: {risk_score})**")
    else: st.success(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level} (–û—Ü–µ–Ω–∫–∞: {risk_score})**")

    st.info(f"**–ü–æ—è—Å–Ω–µ–Ω–∏–µ:** {explanation}")
    st.divider()

# --- –ë–ª–æ–∫ –û–±—Ä–∞—Ç–Ω–æ–π –°–≤—è–∑–∏ ---
if st.session_state.check_result and st.session_state.last_check_value:

    data_type_to_blacklist = st.session_state.last_check_type
    value_to_blacklist = st.session_state.last_check_value
    original_value_display = st.session_state.last_check_value

    if data_type_to_blacklist == 'url':
        data_type_to_blacklist = 'domain'
        try:
            domain_match = re.search(r"https?://(?:www\.)?([^/:\s]+)", value_to_blacklist)
            if domain_match:
                value_to_blacklist = domain_match.group(1)
            else: # –ï—Å–ª–∏ URL –±–µ–∑ http://, –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                 value_to_blacklist = value_to_blacklist.split('/')[0].split(':')[0]
        except Exception:
            pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤
    if data_type_to_blacklist in ["phone", "email", "domain"]:
        st.subheader("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
        st.write(f"–°—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ **'{original_value_display}'** (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ `{data_type_to_blacklist}: {value_to_blacklist}`) —è–≤–ª—è–µ—Ç—Å—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º?")

        if st.button("–ü–æ–º–µ—Ç–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", key="add_to_blacklist_button"):
            with st.spinner("–î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö..."):
                service_name = "fraud_check_service (/add-blacklist/)"
                try:
                    payload = {
                        "data_type": data_type_to_blacklist,
                        "value": value_to_blacklist
                    }
                    response = requests.post(f"{FRAUD_CHECK_SERVICE_URL}/add-blacklist/", json=payload, timeout=60)
                    response.raise_for_status() # –õ–æ–≤–∏–º HTTP –æ—à–∏–±–∫–∏

                    st.success(f"–£—Å–ø–µ—à–Ω–æ! '{value_to_blacklist}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
                    st.session_state.last_check_value = None
                    st.session_state.check_result = None
                    st.rerun()

                except requests.exceptions.RequestException as e:
                    st.error(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º '{service_name}'. "
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker."
                    )
                except requests.exceptions.HTTPError as e:
                     is_duplicate = False
                     error_detail = ""

                     try:
                          data = e.response.json()
                          if isinstance(data, dict):
                              error_detail = data.get("detail", "")
                          else:
                              error_detail = str(data)
                     except json.JSONDecodeError:
                          error_detail = e.response.text
                     except Exception:
                          error_detail = e.response.text

                     if error_detail:
                         error_lower = str(error_detail).lower()
                         if "unique constraint" in error_lower or \
                            "duplicate key value violates unique constraint" in error_lower or \
                            "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error_lower:
                             is_duplicate = True

                     if is_duplicate:
                         st.warning(f"–ó–∞–ø–∏—Å—å '{value_to_blacklist}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
                     else:
                         st.error(f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e.response.status_code}")
                         st.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_detail or e.response.text}")

                except Exception as e:
                     st.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {e}")