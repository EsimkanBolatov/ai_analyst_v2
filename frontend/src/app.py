#frontend/src/app
import streamlit as st
import requests
import os
import time
import pandas as pd
import uuid
import math

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="AI-Analyst v2.0",
    page_icon="üåû",
    layout="wide"
)

# --- URL —Å–µ—Ä–≤–∏—Å–æ–≤ ---
FILE_SERVICE_URL = os.getenv("FILE_SERVICE_URL", "http://file_service:8000")
PROFILING_SERVICE_URL = os.getenv("PROFILING_SERVICE_URL", "http://profiling_service:8000")
GROQ_SERVICE_URL = os.getenv("GROQ_SERVICE_URL", "http://groq_service:8000")
TRAINING_SERVICE_URL = os.getenv("TRAINING_SERVICE_URL", "http://training_service:8000")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---

@st.cache_data(ttl=30)
def get_file_list():
    try:
        response = requests.get(f"{FILE_SERVICE_URL}/files/")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.toast(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—Ç file_service. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã.",
            icon="‚ö†Ô∏è"
        )
    return []


@st.cache_data(ttl=60)
def get_model_list():
    try:
        response = requests.get(f"{TRAINING_SERVICE_URL}/models/")
        response.raise_for_status()
        return response.json().get("models", [])
    except requests.exceptions.RequestException as e:
        st.toast(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –æ—Ç training_service. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã.",
            icon="‚ö†Ô∏è"
        )
    return []


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –î–∞—à–±–æ—Ä–¥–∞ ---

st.title("üåö –î–∞—à–±–æ—Ä–¥ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
st.markdown("–û–±–∑–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

# --- –°–µ–∫—Ü–∏—è 1: –û–±–∑–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
st.header("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")

col1, col2 = st.columns(2)

with col1:
    st.subheader("üóÇÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    file_list = get_file_list()
    if file_list:
        df_files = pd.DataFrame(file_list, columns=["–ò–º—è —Ñ–∞–π–ª–∞"])
        st.dataframe(df_files, width=None, use_container_width=True)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")

with col2:
    st.subheader("üóø –û–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
    model_list = get_model_list()
    if model_list:
        df_models = pd.DataFrame(model_list, columns=["–ò–º—è –º–æ–¥–µ–ª–∏"])
        st.dataframe(df_models, width=None, use_container_width=True)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")

st.divider()

# --- –°–µ–∫—Ü–∏—è 2: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ---
st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")

uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
    type=['csv'],
    key="main_uploader"
)

if st.button("–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏ –∞–Ω–∞–ª–∏–∑", key="main_upload_button"):
    if uploaded_file is not None:
        filename = uploaded_file.name

        CHUNK_SIZE = 10 * 1024 * 1024
        session_id = str(uuid.uuid4())
        total_chunks = math.ceil(uploaded_file.size / CHUNK_SIZE)
        progress_bar = st.progress(0, text="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...")

        analysis_successful = True

        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤
            for i in range(total_chunks):
                chunk = uploaded_file.read(CHUNK_SIZE)
                if not chunk: break
                files = {'file': (filename, chunk)}
                data = {'session_id': session_id, 'chunk_index': i}
                service_name = "file_service (upload)"
                response = requests.post(f"{FILE_SERVICE_URL}/upload/", files=files, data=data, timeout=60)
                response.raise_for_status()
                progress_percent = (i + 1) / total_chunks
                progress_bar.progress(progress_percent, text=f"–ó–∞–≥—Ä—É–∑–∫–∞... {i + 1}/{total_chunks} —á–∞—Å—Ç–µ–π")

            # –°–±–æ—Ä–∫–∞ —Ñ–∞–π–ª–∞
            progress_bar.progress(1.0, text="–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –°–æ–±–∏—Ä–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
            assemble_data = {'filename': filename}
            service_name = "file_service (assemble)"
            response = requests.post(f"{FILE_SERVICE_URL}/assemble/{session_id}", data=assemble_data, timeout=120)
            response.raise_for_status()

            st.success(f"‚úÖ –§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            st.info("–ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã...")

            # --- –ó–∞–ø—É—Å–∫ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è ---
            profile_report_filename = None
            with st.spinner("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ-–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
                profile_req = {"filename": filename}
                service_name = "profiling_service"
                profile_resp = requests.post(f"{PROFILING_SERVICE_URL}/profile/", json=profile_req, timeout=300)
                profile_resp.raise_for_status()  # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ª–æ–≤–∏—Ç HTTP –æ—à–∏–±–∫–∏

                st.success("‚úÖ –ê–≤—Ç–æ-–∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤!")
                profile_report_filename = profile_resp.json().get('report_filename')
                if profile_report_filename:
                    st.session_state['last_profile_report'] = profile_report_filename

            # --- –ó–∞–ø—É—Å–∫ AI-–ê–Ω–∞–ª–∏–∑–∞ ---
            analysis_result_json = None
            with st.spinner("ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫ (Groq) –∏–∑—É—á–∞–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ..."):
                groq_req = {"filename": filename}
                service_name = "groq_service"
                groq_resp = requests.post(f"{GROQ_SERVICE_URL}/analyze/", json=groq_req, timeout=300)
                groq_resp.raise_for_status()  # –õ–æ–≤–∏–º HTTP –æ—à–∏–±–∫–∏

                st.success("‚úÖ AI-–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                analysis_result_json = groq_resp.json()
                st.session_state['last_analysis_result'] = analysis_result_json
                st.session_state['last_analyzed_filename'] = filename

        except requests.exceptions.RequestException as e:
            analysis_successful = False
            st.error(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º '{service_name}'. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã ('docker-compose up') "
                f"–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ."
            )

        except requests.exceptions.HTTPError as e:
            analysis_successful = False
            st.error(f"‚ùå –°–µ—Ä–≤–∏—Å '{service_name}' –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e.response.status_code}")
            try:
                error_detail = e.response.json().get("detail", e.response.text)
                st.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_detail}")
            except Exception:
                st.error(f"   –û—Ç–≤–µ—Ç: {e.response.text}")

        except Exception as e:
            # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            analysis_successful = False
            st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è '{service_name}': {e}")

        # --- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
        if analysis_successful:
            st.info("–ê–Ω–∞–ª–∏–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 'Data Profile' –∏ 'AI Analyst Report' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
            st.cache_data.clear()
        # else:
        # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —É–∂–µ –±—ã–ª–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –≤—ã—à–µ

    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")