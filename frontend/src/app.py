#frontend/src/app.py
import streamlit as st
import requests
import uuid
import math
import json

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
FILE_SERVICE_URL = "http://file_service:8000"
GROQ_SERVICE_URL = "http://groq_service:8000"
PROFILING_SERVICE_URL = "http://profiling_service:8000"
CHUNK_SIZE = 1024 * 1024 * 10 # 10 –ú–ë (—ç—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä —Ç–µ–ø–µ—Ä—å –º–µ–Ω–µ–µ –≤–∞–∂–µ–Ω)

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(page_title="AI-Analyst v2.0", layout="wide")
st.title("üöÄ AI-Analyst v2.0: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
st.subheader("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

# --- –í–û–ó–í–†–ê–©–ê–ï–ú –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –ó–ê–ì–†–£–ó–ß–ò–ö ---
uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª (–º–∞–∫—Å–∏–º—É–º 200 –ú–ë)", # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    type="csv"
)

if uploaded_file is not None:
    st.success(f"–§–∞–π–ª '{uploaded_file.name}' –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")

    if st.button("–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏ –∞–Ω–∞–ª–∏–∑"):
        session_id = str(uuid.uuid4())
        total_chunks = math.ceil(uploaded_file.size / CHUNK_SIZE)
        progress_bar = st.progress(0, text="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...")

        try:
            # --- –í–û–ó–í–†–ê–©–ê–ï–ú –õ–û–ì–ò–ö–£ –ü–û–ë–õ–û–ß–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –í PYTHON ---
            # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤ < 200 –ú–ë
            for i in range(total_chunks):
                chunk = uploaded_file.read(CHUNK_SIZE)
                if not chunk: break
                files = {'file': (uploaded_file.name, chunk)}
                data = {'session_id': session_id, 'chunk_index': i}
                response = requests.post(f"{FILE_SERVICE_URL}/upload/", files=files, data=data)
                response.raise_for_status()
                progress_percent = (i + 1) / total_chunks
                progress_bar.progress(progress_percent, text=f"–ó–∞–≥—Ä—É–∑–∫–∞... {i + 1}/{total_chunks} —á–∞—Å—Ç–µ–π")

            # --- –°–±–æ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ---
            progress_bar.progress(1.0, text="–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –°–æ–±–∏—Ä–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
            assemble_data = {'filename': uploaded_file.name}
            response = requests.post(f"{FILE_SERVICE_URL}/assemble/{session_id}", data=assemble_data)
            response.raise_for_status()

            st.success("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

            # --- –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–û–í ---
            # ... (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            with st.spinner("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –±—ã—Å—Ç—Ä—ã–π –∞–≤—Ç–æ-–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
                 profile_req = {"filename": uploaded_file.name}
                 profile_resp = requests.post(f"{PROFILING_SERVICE_URL}/profile/", json=profile_req)

            if profile_resp.status_code == 200:
                st.session_state['profile_report_filename'] = profile_resp.json()['report_filename']
                st.success("‚úÖ –ê–≤—Ç–æ-–∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤!")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ-–∞–Ω–∞–ª–∏–∑–∞: {profile_resp.text}")

            with st.spinner("ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫ (Groq) –∏–∑—É—á–∞–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ..."):
                groq_req = {"filename": uploaded_file.name}
                groq_resp = requests.post(f"{GROQ_SERVICE_URL}/analyze/", json=groq_req)

            if groq_resp.status_code == 200:
                st.session_state['analysis_result'] = groq_resp.json()
                st.session_state['filename'] = uploaded_file.name
                st.success("‚úÖ AI-–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AI-–∞–Ω–∞–ª–∏–∑–µ: {groq_resp.json().get('detail', groq_resp.text)}")

            st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –∏—Ö —É–≤–∏–¥–µ—Ç—å.")

        except Exception as e:
            st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")